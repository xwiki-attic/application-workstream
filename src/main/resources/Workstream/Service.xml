<?xml version="1.0" encoding="ISO-8859-1"?>

<xwikidoc>
<web>Workstream</web>
<name>Service</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.Admin</creator>
<author>xwiki:XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
<creationDate>1218799379000</creationDate>
<date>1219229439000</date>
<contentUpdateDate>1219229439000</contentUpdateDate>
<version>59.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>Workstream.Service</name>
<number>0</number>
<className>XWiki.TagClass</className>
<property>
<tags/>
</property>
</object>
<content>#* Groovy service for the workstream
 * @programming
 *#
{pre}
&lt;%
/*
 *@service outputs latest N status updates on user workstreams as JSON.
 */
if(request.do=="listupdates") {
def offset = 0;
if (request.offset) offset = xwiki.parseInt(request.offset);
def n = 5;
if (request.n) n = xwiki.parseInt(request.n);
def updates = xwiki.activitystream.searchEvents("act.type='workstream'", false, n, offset)
def hasprevious = offset==0 ? "0" : "1";
def hasnext = xwiki.activitystream.searchEvents("act.type='workstream'", false, 1, offset + n) ? "1" : "0";
%&gt;
{
returnedrows : &lt;%=updates.size()%&gt;,
offset : &lt;%=offset%&gt;,
hasprevious : "&lt;%=hasprevious%&gt;",
hasnext : "&lt;%=hasnext%&gt;",
updates : [ &lt;%
updates.reverse().eachWithIndex() { update, i -&gt;
if (i&gt;0) { %&gt;,&lt;% } %&gt;
{
"id" : "&lt;%=update.eventId%&gt;",
"title" : "&lt;%=update.displayBody%&gt;",
"username" : "&lt;%=xwiki.getLocalUserName(update.stream, false)%&gt;",
"userurl" : "&lt;%=xwiki.getURL(update.stream,"view")%&gt;",
"userpic" : "&lt;%=getProfilePictureURL(update.stream, 30)%&gt;",
"date" : "&lt;%=xwiki.formatDate(update.date, "yyyy MMMM dd, HH:mm")%&gt;"
}
&lt;% } %&gt; ]
}
&lt;%
}
/*
 *@service update status of user on it's workstream
 */
else if (request.do=="update") {
    xwiki.activitystream.addActivityEvent(context.user, "workstream", xwiki.getXMLEncoded(request.update));
    print("OK");
}
/**
 * Helper method to get the profile picture URL of a user on the wiki
 */
def getProfilePictureURL( username, height )
{
    def avatarurl = xwiki.getSkinFile("noavatar.png");
    def profiledoc = xwiki.getDocument( username );
    if ( !profiledoc.isNew() )
    {
         profileobj = profiledoc.getObject("XWikiUsers", 0 );
         if ( profiledoc.attachmentList.size() != 0 )
         {
             hasavatar = 0;
             if ( profileobj.avatar &amp;&amp; profileobj.avatar != "" )
                 for ( attach in profiledoc.attachmentList )
                      if ( attach.filename == profileobj.avatar )
                          hasavatar = 1;
             if ( hasavatar == 1 ) {
                 avatarurl = profiledoc.getAttachmentURL(profileobj.avatar, "download", "height="+height);
             }
         }
     }
     return avatarurl;
}
%&gt;
{/pre}</content>
</xwikidoc>
