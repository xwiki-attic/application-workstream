<?xml version="1.0" encoding="ISO-8859-1"?>

<xwikidoc>
<web>Workstream</web>
<name>Javascript</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1220028700000</creationDate>
<date>1220176805000</date>
<contentUpdateDate>1220176805000</contentUpdateDate>
<version>18.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>onDemand=On demand|always=Always</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>Workstream.Javascript</name>
<number>0</number>
<className>XWiki.JavaScriptExtension</className>
<property>
<cache>default</cache>
</property>
<property>
<code>/**
 * Count and print how many chars are left for the user to write his status in the textarea.
 * When getting close to zero, changes the class of the div holding the count number.
 */
function countCharsLeft()
{
     var charsLeft = (140 - $('workstream-status-box').value.length);
     $('workstream-chars-left').innerHTML = charsLeft;
     if(charsLeft &gt; 20) $('workstream-chars-left').setAttribute("class","chars-left-regular");
     if(charsLeft &lt; 20) $('workstream-chars-left').setAttribute("class","chars-left-low");
     if(charsLeft &lt; 5) $('workstream-chars-left').setAttribute("class","chars-left-very-low");
     if(charsLeft &lt; 0) $('workstream-chars-left').setAttribute("class","chars-left-negative");
}
/**
 * Same as above, for the workstream panel
 */
function countCharsLeftInPanel()
{
   var charsLeft = (140 - $('workstream-status-box-panel').value.length);
   $('workstream-chars-left-panel').innerHTML = charsLeft;
   if(charsLeft &gt; 20) $('workstream-chars-left-panel').setAttribute("class","chars-left-regular");
   if(charsLeft &lt; 20) $('workstream-chars-left-panel').setAttribute("class","chars-left-low");
   if(charsLeft &lt; 5) $('workstream-chars-left-panel').setAttribute("class","chars-left-very-low");
   if(charsLeft &lt; 0) $('workstream-chars-left-panel').setAttribute("class","chars-left-negative");
}
/**
 * Update a user status asyncronously, calling the service in Workstream.Service
 * Used by the Workstream.Panel
 */
function updateStatus()
{
   new Ajax.Request( "$xwiki.getURL('Workstream.Service','view','xpage=plain&amp;do=update&amp;update=')" + $('workstream-status-box-panel').value,
      {
        method: 'get',
        onLoading: function() {$('statusupdateloading').className = "loading"; },
        onSuccess: function() {
            $('statusupdateloading').className = "success";
            $('workstream-status-box-panel').value = "$msg.get('workstream.whatareyouworkingon')";
            countCharsLeftInPanel();
            getUpdates(0, 5);
        },
        onError: function() {$('statusupdateloading').className = "error"; }
      });
}
/**
 * Retrieve latest updates on all users streams
 */
function getUpdates(offset, howMany)
{
   if (!offset) offset=0;
   new Ajax.Request( "$xwiki.getURL('Workstream.Service','view','xpage=plain&amp;do=listupdates&amp;offset=')" + offset + "&amp;n=" + howMany,
      {
        method: 'get',
        onLoading: function() {$('updates').className = "loading";},
        onSuccess: function(transport) {
          var res = eval( '(' + transport.responseText + ')' );
          for (i=0;i&lt;res.updates.length;i++)
          {
           if(!$('update_' + res.updates[i].id)) {
            var pp = new Element('img', {'src' : res.updates[i].userpic, 'class':'updatepicture'});
            var update = new Element('div', {'class':'update', 'id':'update_' + res.updates[i].id}).update(pp);
            var author = new Element('a', {'class' : 'updatedauthor', 'href' : res.updates[i].userurl}).update(res.updates[i].username);
            var date = new Element('span', {'class': 'updatedate'}).update(res.updates[i].date);
            var meta = new Element('div', {'class':'updatemeta'}).update(author);
            meta.appendChild(date);
            update.appendChild(meta);
            update.appendChild(new Element('div', {'class': 'clearfloats'}));
            update.appendChild(new Element('div', {'class': 'updatemessage'}).update(res.updates[i].title));
            if($('updates').getElementsBySelector("div.update")[4])
                ($('updates').getElementsBySelector("div.update")[4]).remove();
            new Insertion.Top('updates', update);
           }
          }
          if(res.hasnext=="1") {
            rmClass($('olderupdates'), "hidden");
            $('olderupdates').innerHTML =
              "&lt;a href=\"\#\" onclick=\"getUpdates(" + (res.offset +  res.returnedrows) +","+ res.returnedrows +")\"&gt;$msg.get('workstream.older')&lt;/a&gt;"; // TODO remove this / use global vars + event.observe.
          }
          else {
            addClass($('olderupdates'), 'hidden');
          }
          if(res.hasprevious=="1") {
            rmClass($('newerupdates'), "hidden");
            $('newerupdates').innerHTML =
              "&lt;a href=\"\#\" onclick=\"getUpdates(" + (res.offset -  res.returnedrows) +","+ res.returnedrows +")\"&gt;$msg.get('workstream.newer')&lt;/a&gt;"; // TODO remove this / use global vars + event.observe.
          }
          else {
            addClass($('newerupdates'), 'hidden');
          }
          $('updates').className = "";
          // remove left updates in the DOM when returned less rows than asked (can happen on latest page)
          var updates = $('updates').getElementsBySelector("div.update");
          for(i = res.returnedrows; i&lt;5; i++) {updates[i].remove();}
      }
     }
   );
}</code>
</property>
<property>
<name>Workstream Javascript code</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>Workstream.Javascript</name>
<number>0</number>
<className>XWiki.TagClass</className>
<property>
<tags/>
</property>
</object>
<content>1 JavaScript Extenstion for Workstream

&lt;a href="$doc.getURL('edit','editor=object')"&gt;Edit the javascript extenstion&lt;/a&gt;

#set($code = "{" + "code}") ## trick to be able to evaluate the velocity line inside the code block
$code
$doc.getObject("XWiki.JavaScriptExtension").getProperty("code").value ## retrieve the code in the object attached
$code
</content></xwikidoc>